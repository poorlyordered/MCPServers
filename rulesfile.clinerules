# Ranking of Legends

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## What We're Building
The Ranking of Legends (RoL) Event Management System is a comprehensive platform designed to revolutionize how esports tournaments and leagues are organized, particularly for League of Legends competitions. This platform will serve as a one-stop solution for organizations looking to create, manage, and run successful esports events.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use composition API with `<script setup>` syntax
- Prefer composables over mixins
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure repository files as follows:
```
src/
├── components/     # Vue components organized by feature/type
├── composables/    # Vue composables (shared logic)
├── utils/          # Helper functions
├── types/          # TypeScript types
├── assets/         # Static assets
├── router/         # Vue Router configuration
├── stories/        # Storybook stories
└── lib/           # External integrations
```

## Tech Stack
- Vue 3
- TypeScript
- Vite
- Storybook
- Vitest
- Tailwind CSS

## Naming Conventions
### Component Files
- Use PascalCase for component files (e.g., BaseContainer.vue, DataTable.vue)
- Prefix base/core components with "Base" (e.g., BaseInput.vue, BaseModal.vue)
- Group related components with descriptive prefixes (e.g., AuthCallback.vue)
- Use suffixes to indicate component type when needed (e.g., UserList.vue, UserListItem.vue)

### Component Directories
- Use kebab-case for directories (e.g., components/layout/, components/auth/)
- Group components by feature or type:
  - auth/ - Authentication related components
  - common/ - Shared utility components
  - data/ - Data display components
  - feedback/ - User feedback components
  - form/ - Form-related components
  - icons/ - Icon components
  - layout/ - Layout and structure components
  - navigation/ - Navigation-related components

### Props and Events
- Use camelCase for prop names (e.g., maxWidth, showIcon)
- Boolean props should use is/has/should/can/will prefixes (e.g., isLoading, hasError)
- Use kebab-case for event names (e.g., update:modelValue, item-selected)
- Prefix v-model events with update: (e.g., update:modelValue)

## Vue Component Structure
### Script Setup
```vue
<script setup lang="ts">
// 1. Type imports
import type { PropType } from 'vue'

// 2. Component imports
import BaseIcon from '../common/BaseIcon.vue'

// 3. Props definition with TypeScript
defineProps({
  label: {
    type: String,
    required: true
  }
})

// 4. Emits with TypeScript
defineEmits<{
  (e: 'update:modelValue', value: string): void
}>()

// 5. Composables
const { isLoading } = useLoading()

// 6. Reactive state
const isOpen = ref(false)

// 7. Computed properties
const classes = computed(() => ({
  'is-active': isOpen.value
}))

// 8. Methods
const handleClick = () => {
  isOpen.value = !isOpen.value
}
</script>
```

### Template Structure
```vue
<template>
  <!-- Root element with component classes -->
  <div :class="['component-name', classes]">
    <!-- Named slots with fallback -->
    <slot name="header">
      <h2>{{ title }}</h2>
    </slot>

    <!-- Main content -->
    <div class="component-name__content">
      <slot></slot>
    </div>
  </div>
</template>
```

### Style Structure
```vue
<style scoped>
/* Component root styles */
.component-name {
  /* Base styles */
}

/* Component variations */
.component-name--modifier {
  /* Modifier styles */
}

/* Child elements (BEM pattern) */
.component-name__element {
  /* Element styles */
}

/* State classes */
.component-name.is-active {
  /* State styles */
}
</style>
```

## State Management
- Use composables for shared logic
- Use provide/inject for dependency injection
- Implement proper cleanup in onUnmounted hooks
- Use refs for reactive state
- Use computed properties for derived state

## Syntax and Formatting
- Use `<script setup>` syntax for components
- Use TypeScript for type safety
- Follow Vue 3 Composition API patterns
- Use proper TypeScript interfaces for props and events

## UI and Styling
- Use scoped CSS with BEM naming
- Implement Tailwind CSS for styling
- Follow component hierarchy guidelines
- Ensure responsive design patterns
- Document component variants and modifiers

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
### Unit Tests (Vitest)
- Co-locate test files with components
- Follow Arrange-Act-Assert pattern
- Test both success and error cases
- Test component props, events, and slots

### Component Tests (Storybook)
- Create stories for all components
- Document props, events, and slots
- Provide usage examples
- Test accessibility compliance
- Test responsive behavior

### E2E Tests (Playwright)
- Test critical user flows
- Test across different viewports
- Test accessibility
- Test performance metrics

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Vue.js security best practices
- Implement proper CORS handling
- Use HTTPS for all API requests
- Validate all component props

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep component stories well-documented
- Document component props, events, and slots
- Include setup instructions for development
- Maintain Storybook documentation
- Don't include comments unless it's for complex logic

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog
